MVI A, 0000H
OUT 20H 			 ;αρχικοποίηση της λυχνίας λάθος κωδικού στο off
MVI A, 0000H		 ;αρχικοποίηση της λυχνίας αναντιστοιχίας χαρτονομισμάτων που ζητάει και ποσού ανάληψης
OUT 21H

					 ;εδώ χρειάζονται 2 είσοδοι γιατί οι κωδικοί είναι τετραψήφιοι
IN 00H				 ;πρώτο byte κωδικού κάρτας
STA 0100H	
IN 01H				 ;δεύτερο byte κωδικού κάρτας
STA 0101H
IN 02H				 ;πρώτο byte κωδικού χρήστη
STA 0102H
IN 03H				 ;δεύτερο byte κωδικού χρήστη
STA 0103H

LHLD 0100H			 ;βάζω τον κωδικό της κάρτας στον DE και του χρήστη στον HL και τους συγκρίνω
XCHG 
LHLD 0102H

MOV A,H
CMP D
JNZ WRONG_CODE 		 ;αν δεν συμπίπτουν ανάβει η λυχνία 
MOV A,E
CMP L
JNZ WRONG_CODE

IN 04H				 ;εισάγει ο χρήστης το ποσό της ανάληψης ανά byte 
STA 0104H
IN 05H;
STA 0105H

IN 06 				 ;επιλέγει αν θέλει να διαλέξει αυτός τί χαρτονομίσματα θέλει (αν ναι θεωρώ είσοδο 1)
MVI B, 0001H
CMP B
JZ CHOOSE_CASH 		 ;αν είναι 1, jump στην επιλογή

					 ;αν έφτασε εδώ επέλεξε να του δώσει ότι θέλει το μηχάνημα
					 ;για να βρω πόσα χαρτονομίσματα θα πάρει από κάθε είδος ξεκινάω διαιρέσεις με το αντίστοιχο χαρτονόμισμα μέχρι να γίνει το υπόλοιπο αρνητικό
MVI A, 0064H 		 ;βάζω το 100 στον Α και μετά στη μνήμη για να το αφαιρώ σε κάθε επανάληψη από το ποσό ανάληψης
STA 0106H 
LHLD 0104H			 ;βάζω στον HL το ποσό της ανάληψης
SHLD 0202H			 ;το αποτέλεσμα της αφαίρεσης θα αποθηκεύεται στις θέσεις μνήμης 0202H-0203H
MVI A, 0000H
STA 0300H 			 ;αρχικοποιώ τη θέση 0300H που θα κρατάει πόσα 100ευρα θα πάρει


EKATO: nop
LHLD 0202H           ;παίρνω το ποσό που θέλω να σπάσω σε 100ευρα
XCHG                 ;το βάζω στον DE
LHLD 0106H           ;βάζω στον HL το 100
MOV A, E       		 ;βάζω στον Α τα 8 λιγότερο σημαντικά bit του DE
SUB L            	 ;αφαιρώ τα αντίστοιχα του HL από αυτά του Α
MOV L, A             ;αποθηκεύω το αποτέλεσμα στον L
MOV A, D             ;κάνω την ίδια διαδικασία για τα 8 σημαντικότερα bit συνυπολογίζοντας όμως και το κρατούμενο απ' την προηγούμενη αφαίρεση
SBB H                       
MOV H, A             ;μεταφέρω το αποτέλεσμα στον H και μετά ανανεώνω τις τιμές των θέσεων 0202H-0203η
SHLD 0202H              

LDA 0300H			 ;φορτώνω και αυξάνω το πηλίκο και στη συνέχεια του ανανεώνω την τιμή στη μνήμη
INR A
STA 0300H 

MOV A,H				 ;συγκρίνω το πιο σημαντικό byte του αριθμόυ που έμεινε απ' την αφαίρεση με το 0
MVI H, 0000H
JZ CHECK_SECOND 	 ;αν είναι μηδέν πάω και συγκρίνω το 2 byte
JC NEXT1			 ;αν έχει σηκωθεί carry flag σημαίνει ότι έγινε underflow άρα μπορεί να προχωρήσει παρακάτω στον υπολογισμό των 50ευρων
JP EKATO			 ;αν είναι θετικός ο αριθμός σημαίνει ότι μπορεί να συνεχιστεί η διαίρεση
JMP NEXT1			 ;αν δεν ισχύουν τα παραπάνω προχωράει κανονικά στον υπολογισμό των 50ευρων 

CHECK_SECOND: nop
MOV A, L			 ;ελέγχονται τα λιγότερο σημαντικά byte
MVI L, 0000H
CMP L				 ;οι έλεγχοι είναι ίδιοι με των σημαντικότερων byte
JC NEXT1
JP EKATO
JMP NEXT1
 

NEXT1: nop
LDA 0300H			 ;φορτώνω τη θέση μνήμης που είναι το πηλίκο και αφαιρώ ένα καθώς μετρήθηκε και η φορά που πήγε αρνητικό το αποτέλεσμα	
DCR A	
STA 0300H
LDA 0202H			 ;βάζω στον Α το αρνητικό αποτέλεσμα και πορσθέτω 100 για να πάρω το υπόλοιπο της διαίρεσης, χρειάζεται μόνο ο Α καθώς το υπόλοιπο είναι σίγουρα <2^8
ADI 0064H	
STA 0202H

MOV A, E			 ;οι διαιρέσεις συνεχίζονται και εδώ με την ίδια λογική μόνο που αφορούν 8 bit, ο Α θα έχει από δω και πέρα το υπόλοιπο
MVI B, 0032H		 ;ο B θα κρατάει τον αριθμό που αφαιρείται κάθε φορά (50,20,10)
MVI E, 0000H		 ;ο E θα κρατάει από δω και πέρα τα πηλίκα

PENHNTA: nop
SUB B	
INR E
CPI 0000H	
JP PENHNTA
DCR E

ADI 0032H
MOV D,A				 ;αποθηκεύω στον D τον Α για να μην χάσω την τιμή όσο θα βάζω τον E στην μνήμη

MOV A,E
STA 0301H			 ;η θέση 0301H έχει πόσα 50ευρα θα πάρει

MOV A,D
MVI B, 0014H
MVI E, 0000H
TWENTY: nop
SUB B
INR E
CPI 0000H
JP TWENTY
DCR E

ADI 0014H
MOV D,A

MOV A,E
STA 0302H			 ;η θέση 0302H τα 20ευρα

MOV A,D
MVI B, 000AH
MVI E, 0000H
DEKA: nop
SUB B
INR E
CPI 0000H
JP DEKA
DCR E

MOV A,E
STA 0303H			 ;και η 0303H τα 10ευρα

					 ;ανοιγόκλεισε κάθε διακόπτη ανάλογα
LDA 0300H
OUT 10H				 ;100
LDA 0301H
OUT 11H				 ;50
LDA 0302H
OUT 12H				 ;20
LDA 0303H
OUT 13H				 ;10
HLT

CHOOSE_CASH: nop

					 ;αφού διαλέξει πόσα χαρτονομίσματα θέλει απ' το καθένα γίνεται επαλήθευση αν αντιστοιχούν στο ποσό ανάληψης, ο τρόπος είναι ότι αθροίζω αυτά που ζητάει και τα συγκρίνω με το ποσό ανάληψης
MVI H, 0000H		 ;αρχικοποιώ τους HL, DE
MVI L, 0000H
MVI D, 0000H
MVI E, 0000H
MVI A, 0000H
STA 0260H  			 ;αρχικοποιώ την μνήμη 0260H που θα έχει το σύνολο αυτών που ζητάει
STA 0261H

IN 07H 				 ;παίρνει πόσα 100ευρα ζητάει
STA 0300H 
CPI 0000H			 ;αν δεν ζητάει πήγαινε στα 50ευρα
JZ JUMP100

LHLD 0260H			 ;φόρτωσε το σύνολο στον HL
MVI C, 0000H		 ;ο C θα μετράει πότε να σταματήσουν οι προσθέσεις, που θα είναι όταν το C γίνει ίσο με την τιμή των χαρτονομισμάτων που ζήτησε απ' αυτό το είδος
MVI D, 0000H
MVI E, 0064H		 ;ο DE θα χρησιμοποιηθεί σαν ζεύγος γιατί το αποτέλεσμα μπορεί να 'ναι πάνω >2^8 και έχει το ποσό που προστίθεται ανάλογα το χαρτονόμισμα
SUM100: nop
DAD D 
SHLD 0260H;
INR C
CMP C
JNZ SUM100

					 ;η ίδια διαδικασία επαναλαμβάνεται για όλα τα είδη χαρτονομισμάτων


JUMP100: nop
IN 08H				 ;παίρνει πόσα 50ευρα
STA 0301H
CPI 0000H
JZ JUMP50

MVI C, 0000H
MVI E, 0032H
SUM50: nop
DAD D 
SHLD 0260H
INR C
CMP C
JNZ SUM50




JUMP50: nop
IN 09H				 ;παίρνει πόσα 20ευρα
STA 0302H
CPI 0000H
JZ JUMP20

MVI C, 0000H
MVI E, 0014H
SUM20: nop
DAD D
SHLD 0260H
INR C
CMP C
JNZ SUM20




JUMP20: nop
IN 0AH				 ;παίρνει πόσα 10ευρα
STA 0303H
CPI 0000H
JZ JUMP10

MVI C, 0000H
MVI E, 000AH
SUM10: nop
DAD D
SHLD 0260H
INR C
CMP C
JNZ SUM10

JUMP10: nop
LHLD 0104H			 ;φόρτωσε στον HL το ποσό της ανάληψης
XCHG				 ;βάλτο στον DE για να γίνει μετά η σύγκριση
LHLD 0260H			 ;φόρτωσε το σύνολο αυτών που ζητάει
MOV A,H
CMP D				 ;σύγκριση των 2 bytes, αν δεν συμπίπτουν ανάβει η λυχνία στην έξοδο 21
JNZ WRONG_SUM
MOV A,L
CMP E
JNZ WRONG_SUM
					 ;αν είναι ίδια τα ποσά άνοιξε τον κάθε διακόπτη ανάλογα
LDA 0300H
OUT 10H				 ;διακόπτης 100
LDA 0301H
OUT 11H 			 ;διακόπτης 50
LDA 0302H
OUT 12H 			 ;διακόπτης 20
LDA 0303H
OUT 13H 			 ;διακόπτης 10
HLT

WRONG_SUM: nop
MVI  A, 0001H 		 ;άναψε τη λυχνία λάθος ποσού
OUT 21H
HLT

WRONG_CODE: nop
MVI A, 0001H 		 ;αναψε τη λυχνία λάθος κωδικού
OUT 20H
HLT